generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  JOB_SEEKER
  EMPLOYER
  ADMIN
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Main User Model
model User {
  id             String          @id @default(cuid())
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  role           UserRole        @default(JOB_SEEKER)
  accounts       Account[]
  sessions       Session[]
  jobSeeker      JobSeeker?
  company        Company?
}

// Job Seeker Model
model JobSeeker {
  userId String  @id @unique
  user   User    @relation(fields: [userId], references: [id])
  name   String
  cv     String?
  jobApplications JobApplication[]
  // ... other fields specific to job seekers
}

model Company {
  userId             String       @id @unique
  user               User         @relation(fields: [userId], references: [id])
  jobListings        JobListing[]
  companyName        String
  logo               String?
  companyDescription String?
  // ... other fields specific to employers (companies)
}

// Job Listing Model
model JobListing {
  id                  String           @id @default(cuid())
  title               String
  description         String
  tags                String[]
  promoted            Boolean          @default(false)
  salaryMin           Int
  salaryMax           Int
  location            String
  remote              Boolean          @default(false)
  applicationDeadline DateTime?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  companyUserId       String
  company             Company          @relation(fields: [companyUserId], references: [userId])
  jobApplications     JobApplication[]
  views               Int              @default(0)
  applyClicked        Int              @default(0)
}

// Job Application Model
model JobApplication {
  id              String     @id @default(cuid())
  jobId           String
  jobSeekerUserId String
  jobListing      JobListing @relation(fields: [jobId], references: [id])
  jobSeeker       JobSeeker  @relation(fields: [jobSeekerUserId], references: [userId])
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}
